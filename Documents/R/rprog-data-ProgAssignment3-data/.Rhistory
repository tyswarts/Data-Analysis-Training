swirl()
?swirl
?swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags,class)
cls_list<-sapply(flags,class)
cls_list<-sapply(flags,class)
cls_vect<-sapply(flags, class)
class(cls_vect)
sum(flags$orange)
clag_colors<-flags[,11:17]
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shape<-flags[,19:23]
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
swirl()
sapply(flags,unique)
vapply(flags,unique,numeric(1))
vapply(flags,unique,numeric(1))
vapply(flags,unique,numeric(1))
sdasd
afasasf
vapply
vapply(flags,unique,numeric(1))
vapply(flags,unique,numeric[1])
vapply(flags,unique,numeric)
vapply(flags, unique, numeric(1))
vapply(flags, unique, numeric(1))
ok()
sapply(flags,class)
vapply(flags, class, character(1)
)
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data("iris")
?iris
lapply(iris,"Sepal.Length",mean)
lapply(iris$Sepal.Length,mean)
flower<-lapply(iris$Sepal.Length,mean)
virgin<-flower$virginica
virgin
flower<-lapply(iris$virginica,mean)
flower
rownames(iris)
iris$Species
flower<-lapply(iris$Species=="virginica",mean(iris$Sepal.Length))
flower<-lapply(iris$Sepal.Length,function() for (iris$Species=="virginica"))
flower<-lapply(iris$Sepal.Length,function() for {iris$Species=="virginica"})
flower<-lapply(iris$Sepal.Length,
lapply(iris$Sepal.Length, function(x) {if (iris$Species=="viginica") ( mean(x)})
lapply(iris$Sepal.Length, function(x) {if (iris$Species=="viginica")  mean(x)})
lapply(iris, function(x) {if (iris$Species=="viginica")  mean(x$Sepal.Length)})
lapply(iris, function(x) {if (iris$Species==viginica)  mean(x$Sepal.Length)})
lapply(iris, function(x) {if (iris$Species=="viginica")  mean(x$Sepal.Length)})
lapply(iris, function(x) {if (x$Species="viginica")  mean(x$Sepal.Length)})
lapply(iris, function(x) {if (x$Species=="viginica")  mean(x$Sepal.Length)})
lapply(iris, function(x) {if (x$Species=="viginica")  mean(x$Sepal.Length)})
lapply(iris, function(x) {if (iris$Species=="viginica")  mean(x$Sepal.Length)})
lapply(iris, function(x) {if (iris$Species=="viginica")  mean(iris$Sepal.Length)})
virgin<-iris[iris$species=="viginica"]
virgin
virgin<-iris[iris$species=="viginica",]
virgin
virgin<-iris[iris$species=="virginica",]
virgin
mydfs <- split(iris,iris$Species)
lapply(iris,function(x) mean(x$septal.length))
mydfs <- split(iris,iris$Species)
lapply(iris,function(x) mean(iris$septal.length))
mydfs <- split(iris,iris$Species)
mydfs
lapply(mydfs$virginica,mean[,2])
lapply(mydfs$virginica,2,mean)
apply(mydfs$virginica,2,mean)
lapply(mydfs$virginica,mean)
apply(iris,2,mean)
apply(iris[,1:4],2,mean)
rowmeans(iris[,1:4])
rowMeans(iris[,1:4])
colMeans(iris)
apply(iris[,1:4],1,mea)
apply(iris[,1:4],1,mean)
apply(iris,1,mean)
library(datasets)
data(mtcars)
?mtcars
split(mtcars,mtcars$cyl)
tapply(mtcars$mpg,mtcars$cyl,mean)
lapply(mtcars,mean)
with(mtcars,tapply(mpg,cyl,mean))
tapply(mtcars$cyl,mtcars$mpg,mean)
mean(mtcars$mpg,mtcars$cyl)
mean(mtcars$mpg,mtcars$cyl)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
sapply(mtcars,cyl,mean)
apply(mtcars,2,mean)
sapply(split(mtcars$hp ,mtcars$cyl),mean)
hp<-sapply(split(mtcars$hp ,mtcars$cyl),mean)
hp[,1]-hp[,3]
hp[1]-hp[3]
debug(ls)
ls
ls
View(shape_mat)
View(flag_colors)
makeCacheMatrix<-function (a,b,c,d) {
#a,b,c,d are the four values that will go into
#the matrix
matr<-rbind(c(a,b),c(c,d))
matr
}
test<-makeCacheMatrix(1,2,3,4)
test
inv(test)
solve(test)
?solve
solve(test)%*%test
#This function creates a special Matrix,
#and then Caches the inverse
makeCacheMatrix<-function (a,b,c,d) {
#a,b,c,d are the four values that will go into
#the matrix
matr<-rbind(c(a,b),c(c,d))
inv<<-solve(matr)
}
test<-makeCacheMatrix(3,1,4,2)
test
#this function take the matrix created in makeCacheMatrix an
#then solves its inverse, If the inverse is already in the Cache
#it will pull that value to avoid the extra calculation
cacheSolve <- function(matr,inv) {
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
inv<-solve(matr)
return(inv)
}
test1<-cacheSolve()
test1<-cacheSolve(matr,inv)
test<-makeCacheMatrix(1,2,3,4)
test
test1<-cacheSolve(matr,inv)
test1
set.seed(20)
x<-rnorm(100)
e<-<-rnorm(100,0,2)
e<-rnorm(100,0,2)
y<-0.5 +2*x+e
plot(x,y)
set.seed(10)
x<-rbinom(100,1,0.5)
e<-<-rnorm(100,0,2)
e<-rnorm(100,0,2)
y<-0.5 +2*x+e
plot(x,y)
set.seed(10)
x<-rbinom(100,1,0.5)
e<-<-rnorm(100,0,2)
e<-rnorm(100,0,2)
y<-0.5 +2*x+e
plot(x,y)
set.seed(10)
x<-rbinom(100,1,0.5)
e<-rnorm(100,0,2)
e<-rnorm(100,0,2)
y<-0.5 +2*x+e
plot(x,y)
set.seed(1)
x<-rnorm(100)
log.mu<-0.5+0.3*x
y<-rpois(100,exp(log.mu))
plot(x,y)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plant,10)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace=ture)
sample(1:6,4,replace=true)
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10)
;etters
letters
LETTERS
sample(LETTERS)
sample(c(1,0),100,replace = TRUE, prob = c(.3,.7))
sample(c(1,0),100,replace = TRUE, prob = c(0.3,0.7))
flips<-sample(c(1,0),100,replace = TRUE, prob = c(0.3,0.7))
flips<-sample(c(0,1),100,replace = TRUE, prob = c(0.3,0.7))
flip
flips
sum(flips)
?rbinom
rbinom(1,size = 100,prob = .7)
flips2<-rbinom(1,size = 100,prob = .7)
flips2<-rbinom(100,size = 1,prob = .7)
flips2
sum(flips2)
?rnorm()
?rnorm
rnorm(10)
rnorm(10,100,25)
rpois(5,10)
replicate(100,rpois(5,10))
my_pois<-replicate(100,rpois(5,10))
my_pois
colmeans(my_pois)
colMeans(my_pois)
cm<-colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist, y=cars$speed)
plot(x=cars$dist, y=cars$speed, "speed")
plot(x=cars$dist, y=cars$speed, xlab= "speed")
plot(x=cars$speed, y=cars$dist, xlab= "Speed")
plot(x=cars$speed, y=cars$dist, xlab= "Speed",ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance", main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, smain = "My Plot")
plot(cars, sub = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch =2)
data("mtcars")
data(mtcars)
?boxplot
boxplot(mpg~cyl,data=mtcars)
hist(mtcars$mpg)
outcome<-read.csv("outcome-of-care-measures.csv",colClasses="character")
setwd("~/R/rprog-data-ProgAssignment3-data")
outcome<-read.csv("outcome-of-care-measures.csv",colClasses="character")
ncol(outcome)
col.names(outcome)
colnames(outcome)
outcome[,7]
best<-function(state,dis){
setwd("~/R/rprog-data-ProgAssignment3-data")
outcome<-read.csv("outcome-of-care-measures.csv",colClasses="character")
State1  <- outcome[which(outcome$State == state),]
State1
}
test<-best("TX")
test
str(test)
colnames(outcome)
best<-function(state,dis){
setwd("~/R/rprog-data-ProgAssignment3-data")
care<-read.csv("outcome-of-care-measures.csv",colClasses="character")
my_data<-data.frame()
names(my_data) <- c("hospital", "state", "outcome")
State1  <- outcome$[which(outcome$State == state),]
df[, c(2,7,care)]
}
best<-function(state,dis){
setwd("~/R/rprog-data-ProgAssignment3-data")
care<-read.csv("outcome-of-care-measures.csv",colClasses="character")
my_data<-data.frame()
names(my_data) <- c("hospital", "state", "outcome")
#State1  <- outcome$[which(outcome$State == state),]
state2<-df[, c(2,7,care)]
}
test<-best("tx")
best<-function(state,dis){
setwd("~/R/rprog-data-ProgAssignment3-data")
care<-read.csv("outcome-of-care-measures.csv",colClasses="character")
#my_data<-data.frame()
#names(my_data) <- c("hospital", "state", "outcome")
#State1  <- outcome$[which(outcome$State == state),]
state2<-df[, c(2,7,care)]
}
test<-best("tx")
?df
best<-function(state,dis){
setwd("~/R/rprog-data-ProgAssignment3-data")
care<-read.csv("outcome-of-care-measures.csv",colClasses="character")
my_data<-data.frame()
names(my_data) <- c("hospital", "state", "outcome")
State1  <- outcome[which(outcome$State == state),]
outcomes <- c("heart attack"=11, "heart failure"=17, "pneumonia"=23)
States<-df[, c(2,7,care[care])].
}
best<-function(state,dis){
setwd("~/R/rprog-data-ProgAssignment3-data")
care<-read.csv("outcome-of-care-measures.csv",colClasses="character")
my_data<-data.frame()
names(my_data) <- c("hospital", "state", "outcome")
State1  <- outcome[which(outcome$State == state),]
outcomes <- c("heart attack"=11, "heart failure"=17, "pneumonia"=23)
States<-df[, c(2,7,care[care])]
}
test<-best("tx")
test<-best(c("hospital","tx","outcome")
best<-function(state,dis){
setwd("~/R/rprog-data-ProgAssignment3-data")
care<-read.csv("outcome-of-care-measures.csv",colClasses="character")
#my_data<-data.frame()
#names(my_data) <- c("hospital", "state", "outcome")
State1  <- outcome[which(outcome$State == state),]
outcomes <- c("heart attack"=11, "heart failure"=17, "pneumonia"=23)
States<-df[, c(2,7,care[care])]
}
test<-best(c("tx", "heart attack")
test<-best("tx", "heart attack")
test<-best(c("tx", "heart attack")
outcome(df[, c(2,7,column_index)])
df[, c(2,7,outcome)]
df
